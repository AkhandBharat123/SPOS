package sposcode.paging;

import java.util.Deque;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

class Cache {
    int key;
    String value;

    Cache(int key, String value) {
        this.key = key;
        this.value = value;
    }
}

public class LRU {
    private Deque<Integer> queue;
    private Map<Integer, Cache> cacheMap;
    private int cacheCapacity;

    public LRU(int capacity) {
        cacheCapacity = capacity;
        queue = new LinkedList<>();
        cacheMap = new HashMap<>();
    }

    public String getElementFromCache(int key) {
        if (cacheMap.containsKey(key)) {
            Cache current = cacheMap.get(key);
            queue.remove(current.key);
            queue.addFirst(current.key);
            return current.value;
        }
        return "Not exist";
    }

    public void putElementInCache(int key, String value) {
        if (cacheMap.containsKey(key)) {
            Cache curr = cacheMap.get(key);
            queue.remove(curr.key);
        } else {
            if (queue.size() == cacheCapacity) {
                int temp = queue.removeLast();
                cacheMap.remove(temp);
            }
        }
        Cache newItem = new Cache(key, value);
        queue.addFirst(newItem.key);
        cacheMap.put(key, newItem);
    }

    public static void main(String[] args) {
        LRU cache = new LRU(4);
        cache.putElementInCache(1, "Value_2");
        cache.putElementInCache(2, "Value_1");
        cache.putElementInCache(3, "Value_4");
        cache.putElementInCache(4, "Value_3");
        System.out.println(cache.getElementFromCache(2));
        System.out.println();
        System.out.println(cache.queue);
        System.out.println();
        System.out.println(cache.getElementFromCache(5));
        cache.putElementInCache(5, "Value_5");
        System.out.println();
        System.out.println(cache.queue);
        System.out.println();
    }
}


